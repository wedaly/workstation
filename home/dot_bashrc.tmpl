# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# history
export HISTFILESIZE=100000
export HISTSIZE=100000
export HISTCONTROL=ignoredups
shopt -s histappend
export PROMPT_COMMAND="history -a"

# terminal
export TERMINAL=xterm
export KEYTIMEOUT=1

# don't exit on ctrl-d
export IGNOREEOF=10

# prompt
PS1='\[\033[0;34m\][\H:\w]\[\033[00m\] '

{{- if eq .chezmoi.os "linux" }}
# ls colors
alias ls='ls --color=auto'
{{- end }}

# aretext and vim key bindings everywhere
set -o vi
export EDITOR=aretext
export GIT_EDITOR=aretext
export SUDO_EDITOR=$HOME/go/bin/aretext

# git aliases
alias gb='git branch'
alias gc='git commit'
alias gco='git checkout'
alias wip='git add -u && git commit -m wip'
alias gd='git diff'

gr() {
    branches=$(git branch --all)
    if echo "$branches" | grep "origin/master" > /dev/null; then
        b="origin/master"
    else 
        b="origin/main"
    fi
    git rebase -i "$b"
}

gdm() {
    branches=$(git branch --all)
    if echo "$branches" | grep "origin/master" > /dev/null; then
        b="origin/master"
    else 
        b="origin/main"
    fi
    git diff "$b"...HEAD
}

gp() {
    b=$(git rev-parse --abbrev-ref HEAD)
    git push origin $b $@
}

# git completions
source $HOME/.git-completion.bash
__git_complete gb _git_branch
__git_complete gco _git_checkout

# scripts
export PATH="$HOME/bin:$PATH"

{{- if eq .chezmoi.os "darwin" }}
export BASH_SILENCE_DEPRECATION_WARNING=1

# homebrew
eval "$(/opt/homebrew/bin/brew shellenv)"
export PATH="/opt/homebrew/bin:$(brew --prefix python)/libexec/bin:$PATH:/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"
export PATH="$(brew --prefix python)/libexec/bin:$PATH"

# homebrew bash-completion@2
[[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] && . "/opt/homebrew/etc/profile.d/bash_completion.sh"

# pipx
export PATH="$(pipx environment --value PIPX_BIN_DIR):$PATH"

# xdg config
export XDG_CONFIG_HOME=$HOME/.config
{{- end }}

# python interpreter enable readline and vi-mode
export PYTHONSTARTUP=~/.pythonrc

# rust
if [ -e $HOME/.cargo/env ]; then
    source $HOME/.cargo/env # rustup
else
    export PATH=$PATH:$HOME/.cargo/bin
fi

# go
export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin

# nodejs
export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# fuzzy find
export FZF_DEFAULT_COMMAND='rg --files'

dir () {
    cd $(find . -type d ! -path "*/.git/*" 2> /dev/null | fzf --reverse || pwd)
}

repo() {
    cd $(find $HOME/repos -maxdepth 5 -type d -name ".git" | xargs -I{} dirname {} | fzf --reverse || pwd)
}

alias r=repo
alias repos=repo

adhoc () {
    cd $(find $HOME/adhoc -mindepth 1 -maxdepth 1 -type d | fzf --reverse || pwd)
}

# gospelunk
gofind () {
    gospelunk list -t {{"$'{{ range .Defs }}-line={{.Line}} {{.Path|RelPath}} {{.Name}}\\n{{ end }}'"}} $@ \
    | fzf --reverse \
    | cut -d " " -f 1-2 \
    | xargs -r aretext
}

# devlog
alias dle="devlog edit"
alias dlt="devlog tail | less"
alias todo="devlog todo"

# aretext
alias at="aretext"

# kubectl
if command -v kubectl >/dev/null 2>&1; then
    alias k=kubectl
    source <(kubectl completion bash)
{{- if eq .chezmoi.os "linux" }}
    complete -F __start_kubectl k
{{- else if eq .chezmoi.os "darwin" }}
    complete -o default -F __start_kubectl k
{{- end }}
fi

{{- if eq .chezmoi.os "linux" }}
# firefox / wayland
export MOZ_ENABLE_WAYLAND=1
{{- end }}

{{ if .gpg.key }}
# gpg-agent
export GPG_TTY=$(tty)
gpg-connect-agent updatestartuptty /bye >/dev/null
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpgconf --launch gpg-agent
{{- else if eq .chezmoi.os "linux" }}
# ssh keychain
if [ -f "$HOME/.ssh/id_ed25519" ]; then
    eval $(keychain --eval --timeout 2880 --quiet id_ed25519)
fi
if [ -f "$HOME/.ssh/id_rsa" ]; then
    eval $(keychain --eval --timeout 2880 --quiet id_rsa)
fi
{{- end }}

# start tmux or attach to existing session
TMUX_SESSION="${TMUX_SESSION:-default}"
if [ -z "$TMUX" ] && [ -z "$DISABLE_TMUX" ]; then
    tmux attach -t "$TMUX_SESSION" || tmux new -s "$TMUX_SESSION"
fi

# user specific aliases and functions
if [ -f ~/.bash_private ]; then
    source $HOME/.bash_private
fi
if [ -d ~/.bashrc.d ]; then
    for rc in ~/.bashrc.d/*; do
        if [ -f "$rc" ]; then
            . "$rc"
        fi
    done
fi
unset rc
