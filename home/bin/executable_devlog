#!/usr/bin/env python3

from contextlib import contextmanager
from datetime import date, datetime
import os
import subprocess
import sys

USAGE = """devlog <command>

COMMANDS:
    todo     Open tasks in an editor.
    edit     Open today's devlog entry in an editor.
    tail     Print last devlog entries to stdout.
    tidy     Move completed tasks to done file.
    sync     Commit and push the devlog git repository.
"""

DEFAULT_DEVLOG_DIR = os.path.expanduser("~/devlogs")
DEFAULT_EDITOR = "nano"

DEVLOG_DIR = os.environ.get("DEVLOG_DIR", DEFAULT_DEVLOG_DIR)
EDITOR = os.environ.get("EDITOR", DEFAULT_EDITOR)
TODO_PATH = os.path.join(DEVLOG_DIR, "todo.txt")
DONE_PATH = os.path.join(DEVLOG_DIR, "done.txt")


def main():
    if len(sys.argv) < 2:
        print_usage_and_exit()

    cmd = sys.argv[1]
    if cmd == "todo":
        run_todo_cmd()
    elif cmd == "edit":
        run_edit_cmd()
    elif cmd == "tail":
        run_tail_cmd()
    elif cmd == "tidy":
        run_tidy_cmd()
    elif cmd == "sync":
        run_sync_cmd()
    else:
        print_usage_and_exit()


def print_usage_and_exit():
    print(USAGE)
    sys.exit(1)


def run_todo_cmd():
    open_editor(TODO_PATH)


def run_edit_cmd():
    today = date.today()
    month_dir = os.path.join(DEVLOG_DIR, str(today.year), "{:02}".format(today.month))
    os.makedirs(month_dir, exist_ok=True)
    day_path = os.path.join(month_dir, "{:02}.md".format(today.day))
    open_editor(day_path)


def run_tail_cmd():
    with chdir(DEVLOG_DIR):
        paths = []
        for root, dir, files in os.walk("."):
            for name in files:
                if name.endswith(".md"):
                    paths.append(os.path.join(root, name))

        # iterate descending by date
        paths.sort(reverse=True)
        try:
            for p in paths:
                try:
                    date = datetime.strptime(p, "./%Y/%m/%d.md").strftime("%Y-%m-%d")
                except:
                    continue
                sys.stdout.write("======= {} ========\n".format(date))
                with open(p) as f:
                    for line in f:
                        sys.stdout.write(line)
                sys.stdout.write("\n")
        except BrokenPipeError:
            sys.stdout = None # suppress BrokenPipeError when Python tries to flush stdout.


def run_tidy_cmd():
    complete_tasks = []
    incomplete_tasks = []
    with open(TODO_PATH) as f:
        for line in f:
            if line.startswith("x "):
                complete_tasks.append(line)
            else:
                incomplete_tasks.append(line)

    complete_date = date.today().strftime("%Y-%m-%d")
    with open(DONE_PATH, "a") as f:
        for line in complete_tasks:
            line = line.strip() + " completed:{}\n".format(complete_date)
            f.write(line)

    with open(TODO_PATH, "w") as f:
        for line in incomplete_tasks:
            f.write(line)


def run_sync_cmd():
    with chdir(DEVLOG_DIR):
        git_cmd(["add", "."])
        git_cmd(["commit", "-m", "devlog sync"])
        git_cmd(["fetch", "origin"])
        git_cmd(["rebase", "origin/main"])
        git_cmd(["push", "origin"])


def git_cmd(args):
    print("git {}".format(" ".join(args)))
    subprocess.run(["git"] + args)


def open_editor(path):
    with chdir(DEVLOG_DIR):
        subprocess.run([EDITOR, path])


@contextmanager
def chdir(path):
    wd = os.getcwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(wd)


if __name__ == "__main__":
    main()
