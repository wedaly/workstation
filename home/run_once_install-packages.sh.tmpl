#!/usr/bin/env sh
set -e

GO_VERSION=1.23.3
{{- if and (eq .chezmoi.os "linux") (eq .chezmoi.arch "amd64") }}
    GO_SHA256SUM=a0afb9744c00648bafb1b90b4aba5bdb86f424f02f9275399ce0c20b93a2c3a8
{{- else if and (eq .chezmoi.os "darwin") (eq .chezmoi.arch "arm64") }}
    GO_SHA256SUM=8b7caf2ac60bdff457dba7d4ff2a01def889592b834453431ae3caecf884f6a5
{{- end }}
RUST_VERSION=1.83.0
KUBERNETES_VERSION=1.31

{{ if eq .chezmoi.os "linux" -}}
{{ if eq .chezmoi.osRelease.id "ubuntu" -}}
echo "Installing system packages (apt)"
sudo apt update
sudo apt install \
    vim \
    wget \
    curl \
    git \
    tmux \
    keychain \
    tree \
    jq \
    ripgrep \
    fzf \
    htop \
    python3 \
    python3-pip \
    universal-ctags \
    ca-certificates \
    gnupg \
    apt-transport-https

echo "Installing docker (apt)"
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

echo "Installing kubectl (apt)"
curl -fsSL https://pkgs.k8s.io/core:/stable:/v${KUBERNETES_VERSION}/deb/Release.key | sudo gpg --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v${KUBERNETES_VERSION}/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
sudo apt install kubectl

{{ else if eq .chezmoi.osRelease.id "fedora" -}}
echo "Installing system packages (dnf)"
sudo dnf update
sudo dnf install \
    vim \
    wget \
    curl \
    git \
    make \
    gcc \
    tmux \
    tree \
    jq \
    sd \
    ripgrep \
    fzf \
    htop \
    python3 \
    ctags

echo "Installing docker (dnf)"
sudo dnf install dnf-plugins-core
sudo dnf-3 config-manager --add-repo=https://download.docker.com/linux/fedora/docker-ce.repo
sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo systemctl enable docker
sudo systemctl start docker

echo "Installing kubectl (dnf)"
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v${KUBERNETES_VERSION}/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v${KUBERNETES_VERSION}/rpm/repodata/repomd.xml.key
EOF
sudo yum install kubectl
{{ end -}}

{{ else if eq .chezmoi.os "darwin" -}}
echo "Installing system packages (brew)"
brew install --quiet \
    coreutils \
    bash \
    vim \
    wget \
    curl \
    git \
    tmux \
    tree \
    jq \
    sd \
    ripgrep \
    fzf \
    gnupg \
    python3 \
    gnu-sed \
    universal-ctags
{{ end -}}

{{- if eq .chezmoi.os "linux" }}
echo "Docker Linux post-install"
sudo groupadd -f docker
sudo usermod -aG docker $USER

echo "Installing kubectl node-shell"
curl -LO https://github.com/kvaps/kubectl-node-shell/raw/master/kubectl-node_shell
chmod +x ./kubectl-node_shell
sudo mv ./kubectl-node_shell /usr/local/bin/kubectl-node_shell

echo "Installing rust"
if ! (gpg --list-keys | grep "0x85AB96E6FA1BE5FE"); then
    curl https://keybase.io/rust/pgp_keys.asc | gpg --import
fi
if (which rustc && rustc --version | cut -d ' ' -f 2 | grep $RUST_VERSION); then
    echo "rust v$RUST_VERSION is already installed"
else
    RUST_TARBALL="rust-${RUST_VERSION}-x86_64-unknown-linux-gnu.tar.gz"
    RUST_TARBALL_SIG="${RUST_TARBALL}.asc"
    RUST_TARBALL_URL="https://static.rust-lang.org/dist/${RUST_TARBALL}"
    RUST_TARBALL_SIG_URL="https://static.rust-lang.org/dist/${RUST_TARBALL_SIG}"
    RUST_INSTALL_SCRIPT="/tmp/$(basename $RUST_TARBALL .tar.gz)/install.sh"
    (cd /tmp && rm -rf "$RUST_TARBALL" && rm -rf $RUST_TARBALL_SIG && wget $RUST_TARBALL_URL && wget $RUST_TARBALL_SIG_URL && gpg --verify $RUST_TARBALL_SIG && tar -xvf "$RUST_TARBALL")
    sudo bash "$RUST_INSTALL_SCRIPT"
fi

echo "Installing rust tools"
cargo install sd
{{- end }}

echo "Installing go"
if (which go && go version | cut -d ' ' -f 3 | grep "go$GO_VERSION"); then
    echo "go v$GO_VERSION is already installed"
else
    GO_OS={{ .chezmoi.os }}
    GO_ARCH={{ .chezmoi.arch }}
    GO_TARBALL="go${GO_VERSION}.${GO_OS}-${GO_ARCH}.tar.gz"
    (cd /tmp && rm -rf "$GO_TARBALL" && wget https://go.dev/dl/${GO_TARBALL} && echo "$GO_SHA256SUM  $GO_TARBALL" | sha256sum --check --status)
    sudo rm -rf /usr/local/go
    sudo tar -C /usr/local -xzf "/tmp/$GO_TARBALL"
    export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
fi

echo "Installing go devtools"
go install golang.org/x/tools/cmd/goimports@latest
go install github.com/go-delve/delve/cmd/dlv@latest
go install github.com/shurcooL/markdownfmt@latest
go install honnef.co/go/tools/cmd/staticcheck@latest
go install github.com/wedaly/gospelunk@latest

echo "Installing aretext"
(cd /tmp && rm -rf aretext && git clone https://github.com/aretext/aretext && cd aretext && make install)
